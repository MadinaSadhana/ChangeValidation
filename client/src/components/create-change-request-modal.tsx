import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";

const createChangeRequestSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().optional(),
  changeType: z.enum(["P1", "P2", "Emergency", "Standard"]),
  startDateTime: z.string().min(1, "Start date and time is required"),
  endDateTime: z.string().min(1, "End date and time is required"),
  applicationIds: z.array(z.number()).min(1, "At least one application must be selected"),
});

type CreateChangeRequestData = z.infer<typeof createChangeRequestSchema>;

interface CreateChangeRequestModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
}

export default function CreateChangeRequestModal({
  open,
  onOpenChange,
  onSuccess,
}: CreateChangeRequestModalProps) {
  const { toast } = useToast();
  const [selectedApplications, setSelectedApplications] = useState<number[]>([]);

  const form = useForm<CreateChangeRequestData>({
    resolver: zodResolver(createChangeRequestSchema),
    defaultValues: {
      title: "",
      description: "",
      changeType: "Standard",
      startDateTime: "",
      endDateTime: "",
      applicationIds: [],
    },
  });

  const { data: applications, isLoading: applicationsLoading } = useQuery({
    queryKey: ["/api/applications"],
    enabled: open,
  });

  const createMutation = useMutation({
    mutationFn: async (data: CreateChangeRequestData) => {
      return apiRequest("POST", "/api/change-requests", data);
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Change request created successfully",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/change-requests"] });
      queryClient.invalidateQueries({ queryKey: ["/api/stats/change-manager"] });
      form.reset();
      setSelectedApplications([]);
      onSuccess();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create change request",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: CreateChangeRequestData) => {
    createMutation.mutate({
      ...data,
      applicationIds: selectedApplications,
    });
  };

  const handleApplicationToggle = (applicationId: number, checked: boolean) => {
    let newSelectedApplications: number[];
    if (checked) {
      newSelectedApplications = [...selectedApplications, applicationId];
      setSelectedApplications(newSelectedApplications);
    } else {
      newSelectedApplications = selectedApplications.filter(id => id !== applicationId);
      setSelectedApplications(newSelectedApplications);
    }
    form.setValue("applicationIds", newSelectedApplications);
  };

  // Generate auto-generated change ID for display
  const now = new Date();
  const year = now.getFullYear();
  const autoGeneratedId = `CR-${year}-${String(Date.now()).slice(-6)}`;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Create New Change Request</DialogTitle>
          <DialogDescription>
            Fill in the details below to create a new change request.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Change Request ID
                </label>
                <Input
                  value={autoGeneratedId}
                  readOnly
                  className="bg-gray-50 text-gray-500"
                />
                <p className="text-xs text-gray-500 mt-1">Auto-generated</p>
              </div>

              <FormField
                control={form.control}
                name="changeType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Change Type *</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select Change Type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="P1">P1 - Critical</SelectItem>
                        <SelectItem value="P2">P2 - High</SelectItem>
                        <SelectItem value="Emergency">Emergency</SelectItem>
                        <SelectItem value="Standard">Standard</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Change Title/Description *</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter change title..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Detailed Description</FormLabel>
                  <FormControl>
                    <Textarea
                      rows={3}
                      placeholder="Provide detailed description of the change..."
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="startDateTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Start Date & Time *</FormLabel>
                    <FormControl>
                      <Input type="datetime-local" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="endDateTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>End Date & Time *</FormLabel>
                    <FormControl>
                      <Input type="datetime-local" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Impacted Applications *
              </label>
              <div className="border border-gray-300 rounded-lg p-4 max-h-48 overflow-y-auto">
                {applicationsLoading ? (
                  <div className="text-center py-4">Loading applications...</div>
                ) : applications && Array.isArray(applications) && applications.length > 0 ? (
                  <div className="space-y-3">
                    {applications.map((app: any) => (
                      <label key={app.id} className="flex items-start space-x-3">
                        <Checkbox
                          checked={selectedApplications.includes(app.id)}
                          onCheckedChange={(checked) =>
                            handleApplicationToggle(app.id, !!checked)
                          }
                          className="mt-1"
                        />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900">{app.name}</div>
                          {app.description && (
                            <div className="text-sm text-gray-500">{app.description}</div>
                          )}
                        </div>
                      </label>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-4 text-gray-500">
                    No applications available
                  </div>
                )}
              </div>
              <p className="text-xs text-gray-500 mt-1">
                Select all applications that will be impacted by this change
              </p>
              {form.formState.errors.applicationIds && (
                <p className="text-sm text-red-600 mt-1">
                  {form.formState.errors.applicationIds.message}
                </p>
              )}
            </div>

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={createMutation.isPending}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={createMutation.isPending}
                className="bg-primary hover:bg-blue-700"
              >
                {createMutation.isPending ? "Creating..." : "Create Change Request"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
